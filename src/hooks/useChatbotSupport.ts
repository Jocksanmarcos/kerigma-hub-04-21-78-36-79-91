
import { useState, useCallback, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useNewUserRole } from '@/hooks/useNewRole';

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
  category?: string;
}

export const useChatbotSupport = () => {
  const { data: userRole } = useNewUserRole();
  
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'OlÃ¡! Sou seu assistente de suporte inteligente. Como posso ajudÃ¡-lo(a) hoje? Posso auxiliar com navegaÃ§Ã£o na plataforma, dicas de uso, tutoriais e muito mais!',
      role: 'assistant',
      timestamp: new Date(),
      category: 'help'
    }
  ]);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  // SugestÃµes rÃ¡pidas baseadas no perfil do usuÃ¡rio
  const getQuickSuggestions = () => {
    const baseSuggestions = [
      'Como visualizar minha agenda?',
      'Como me inscrever em eventos?',
      'Quais sÃ£o os atalhos de teclado?'
    ];

    const liderSuggestions = [
      'Como gerenciar minha cÃ©lula?',
      'Como criar escalas?',
      'Como acessar relatÃ³rios?',
      'Como registrar presenÃ§a em reuniÃµes?'
    ];

    const pastorSuggestions = [
      'Como cadastrar uma nova pessoa?',
      'Como fazer lanÃ§amentos financeiros?',
      'Como usar a IA Pastoral?',
      'Como configurar permissÃµes?',
      'Como gerar relatÃ³rios detalhados?',
      'Como gerenciar patrimÃ´nio?',
      'Como exportar dados?'
    ];

    switch (userRole) {
      case 'pastor':
        return [...baseSuggestions, ...liderSuggestions, ...pastorSuggestions];
      case 'lider':
        return [...baseSuggestions, ...liderSuggestions];
      case 'membro':
      default:
        return [...baseSuggestions, 'Como acessar cursos de ensino?', 'Como atualizar meus dados?'];
    }
  };

  const quickSuggestions = getQuickSuggestions();

  const sendMessage = useCallback(async (messageContent: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      content: messageContent,
      role: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setLoading(true);

    try {
      // Get user ID if authenticated
      const { data: { user } } = await supabase.auth.getUser();
      
      // Prepare conversation history for context
      const conversationHistory = messages.map(msg => ({
        role: msg.role,
        content: msg.content
      }));

      // Try to call the chatbot function
      const { data, error } = await supabase.functions.invoke('chatbot-suporte', {
        body: {
          message: messageContent,
          userId: user?.id,
          userRole: userRole || 'membro',
          conversationHistory
        }
      });

      let responseContent = '';

      if (error || !data?.response) {
        console.warn('Chatbot function error, using fallback:', error);
        // Fallback response when the function is not available
        responseContent = generateFallbackResponse(messageContent);
      } else {
        responseContent = data.response;
      }

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: responseContent,
        role: 'assistant',
        timestamp: new Date(),
        category: categorizarResposta(responseContent)
      };

      setMessages(prev => [...prev, assistantMessage]);

    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
      
      // Use fallback response
      const fallbackResponse = generateFallbackResponse(messageContent);
      
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: fallbackResponse,
        role: 'assistant',
        timestamp: new Date(),
        category: 'help'
      };

      setMessages(prev => [...prev, errorMessage]);
      
      toast({
        title: "Modo offline ativo",
        description: "Usando respostas locais enquanto o servidor estÃ¡ indisponÃ­vel.",
        variant: "default"
      });
    } finally {
      setLoading(false);
    }
  }, [messages, toast]);

  const generateFallbackResponse = (question: string): string => {
    const questionLower = question.toLowerCase();
    
    // Respostas personalizadas baseadas no perfil
    const getRoleBasedResponse = (baseResponse: string) => {
      const rolePrefix = userRole ? 
        `**Para ${userRole === 'pastor' ? 'Pastores' : userRole === 'lider' ? 'LÃ­deres' : 'Membros'}:** ` : 
        '';
      return rolePrefix + baseResponse;
    };
    
    if (questionLower.includes('pessoa') || questionLower.includes('cadastr')) {
      if (userRole === 'pastor') {
        return getRoleBasedResponse(`Para cadastrar uma nova pessoa:

1. Acesse o menu "Pessoas" no painel lateral
2. Clique no botÃ£o "Nova Pessoa" (+)
3. Preencha os dados obrigatÃ³rios: Nome, Email, Telefone
4. Defina o tipo de pessoa (Membro, Visitante, etc.)
5. Adicione informaÃ§Ãµes complementares se necessÃ¡rio
6. Clique em "Salvar"

ğŸ’¡ **Dica:** Use a importaÃ§Ã£o em massa para adicionar vÃ¡rias pessoas de uma vez!`);
      } else {
        return getRoleBasedResponse(`Esta funcionalidade estÃ¡ disponÃ­vel apenas para pastores. Entre em contato com a lideranÃ§a para cadastrar novas pessoas na plataforma.`);
      }
    }
    
    if (questionLower.includes('cÃ©lula') || questionLower.includes('celula')) {
      if (userRole === 'pastor' || userRole === 'lider') {
        return getRoleBasedResponse(`Para ${userRole === 'pastor' ? 'criar uma cÃ©lula' : 'gerenciar sua cÃ©lula'}:

1. VÃ¡ para o mÃ³dulo "CÃ©lulas"
2. ${userRole === 'pastor' ? 'Clique em "Nova CÃ©lula"' : 'Selecione sua cÃ©lula'}
3. ${userRole === 'pastor' ? 'Defina nome, lÃ­der e local de reuniÃ£o' : 'Use as abas para gerenciar membros e reuniÃµes'}
4. Configure dia e horÃ¡rio dos encontros
5. ${userRole === 'pastor' ? 'Adicione membros da cÃ©lula' : 'Registre presenÃ§as e crie relatÃ³rios'}
6. ${userRole === 'pastor' ? 'Defina metas e objetivos' : 'Acompanhe o crescimento da cÃ©lula'}

ğŸ“Š **Recursos disponÃ­veis:** RelatÃ³rios de crescimento, controle de presenÃ§a e planejamento de multiplicaÃ§Ã£o.`);
      } else {
        return getRoleBasedResponse(`Para participar de uma cÃ©lula, entre em contato com a lideranÃ§a da igreja. Eles podem te ajudar a encontrar uma cÃ©lula prÃ³xima Ã  sua regiÃ£o.`);
      }
    }
    
    if (questionLower.includes('financeiro') || questionLower.includes('dinheiro') || questionLower.includes('dÃ­zimo')) {
      if (userRole === 'pastor') {
        return getRoleBasedResponse(`Para gerenciar o financeiro:

ğŸ’° **Receitas:**
- DÃ­zimos e ofertas
- DoaÃ§Ãµes especiais
- Eventos e campanhas

ğŸ’¸ **Despesas:**
- Gastos operacionais
- Investimentos em ministÃ©rios
- ManutenÃ§Ã£o e infraestrutura

ğŸ“ˆ **RelatÃ³rios:** Acesse grÃ¡ficos detalhados e exportaÃ§Ãµes para anÃ¡lise completa.`);
      } else {
        return getRoleBasedResponse(`O mÃ³dulo financeiro estÃ¡ disponÃ­vel apenas para pastores. Para questÃµes sobre dÃ­zimos e ofertas, entre em contato com a lideranÃ§a da igreja.`);
      }
    }
    
    if (questionLower.includes('relatÃ³rio') || questionLower.includes('relatorio')) {
      if (userRole === 'pastor' || userRole === 'lider') {
        return getRoleBasedResponse(`Para gerar relatÃ³rios:

1. Acesse a seÃ§Ã£o "RelatÃ³rios" no menu
2. Escolha o tipo de relatÃ³rio desejado
3. Defina o perÃ­odo de anÃ¡lise
4. Configure filtros especÃ­ficos
5. Visualize ou exporte os dados

ğŸ“Š **Tipos disponÃ­veis:** ${userRole === 'pastor' ? 'Pessoas, CÃ©lulas, Financeiro, Eventos, PatrimÃ´nio e mais!' : 'CÃ©lulas, Eventos e Analytics bÃ¡sicos.'}`);
      } else {
        return getRoleBasedResponse(`RelatÃ³rios detalhados estÃ£o disponÃ­veis para lÃ­deres e pastores. Como membro, vocÃª pode visualizar seus dados pessoais e participaÃ§Ã£o em eventos atravÃ©s da agenda.`);
      }
    }

    if (questionLower.includes('agenda') || questionLower.includes('eventos')) {
      return getRoleBasedResponse(`Para visualizar sua agenda:

1. Acesse o menu "Agenda" 
2. Navegue pelo calendÃ¡rio para ver seus eventos
3. Clique nos eventos para ver detalhes
4. ${userRole === 'membro' ? 'Inscreva-se em novos eventos atravÃ©s do menu "Eventos"' : 'Gerencie eventos e escalas conforme suas permissÃµes'}

ğŸ“… **Dica:** Use as notificaÃ§Ãµes para ser lembrado de eventos importantes!`);
    }
    
    // Resposta padrÃ£o personalizada por perfil
    const getDefaultResponse = () => {
      const commonFeatures = [
        'ğŸ“… **Agenda** - Visualizar eventos e compromissos',
        'ğŸ“š **Ensino** - Cursos e certificados'
      ];

      switch (userRole) {
        case 'pastor':
          return `Obrigado pela sua pergunta! Como Pastor, posso ajudar com:

ğŸ”¹ **Pessoas** - Cadastros e gerenciamento
ğŸ”¹ **CÃ©lulas** - CriaÃ§Ã£o e supervisÃ£o
ğŸ”¹ **Financeiro** - DÃ­zimos, ofertas, despesas
ğŸ”¹ **RelatÃ³rios** - AnÃ¡lises completas
ğŸ”¹ **IA Pastoral** - Aconselhamento assistido
ğŸ”¹ **ConfiguraÃ§Ãµes** - AdministraÃ§Ã£o geral
${commonFeatures.join('\n')}

Como posso ser mais especÃ­fico para ajudÃ¡-lo?`;

        case 'lider':
          return `Obrigado pela sua pergunta! Como LÃ­der, posso ajudar com:

ğŸ”¹ **CÃ©lulas** - Gerenciamento da sua cÃ©lula
ğŸ”¹ **Escalas** - CriaÃ§Ã£o de escalas de serviÃ§o
ğŸ”¹ **RelatÃ³rios** - AnÃ¡lises da sua Ã¡rea
ğŸ”¹ **Eventos** - OrganizaÃ§Ã£o e participaÃ§Ã£o
${commonFeatures.join('\n')}

Como posso ser mais especÃ­fico para ajudÃ¡-lo?`;

        case 'membro':
        default:
          return `Obrigado pela sua pergunta! Como Membro, posso ajudar com:

ğŸ”¹ **Eventos** - InscriÃ§Ãµes e participaÃ§Ã£o
ğŸ”¹ **Perfil** - AtualizaÃ§Ã£o de dados pessoais
${commonFeatures.join('\n')}
ğŸ”¹ **Suporte** - DÃºvidas sobre uso da plataforma

Como posso ser mais especÃ­fico para ajudÃ¡-lo?`;
      }
    };

    return getDefaultResponse();
  };

  const categorizarResposta = (resposta: string): string => {
    const respostaLower = resposta.toLowerCase();
    
    if (respostaLower.includes('tutorial') || respostaLower.includes('passo a passo') || respostaLower.includes('como fazer')) {
      return 'tutorial';
    }
    if (respostaLower.includes('dica') || respostaLower.includes('sugestÃ£o') || respostaLower.includes('recomendaÃ§Ã£o')) {
      return 'tip';
    }
    if (respostaLower.includes('ajuda') || respostaLower.includes('suporte') || respostaLower.includes('problema')) {
      return 'help';
    }
    
    return 'help';
  };

  // Aprender com interaÃ§Ãµes do usuÃ¡rio
  useEffect(() => {
    const saveInteractionPattern = async () => {
      if (messages.length > 2) {
        try {
          const { data: { user } } = await supabase.auth.getUser();
          
          if (user) {
            const recentMessages = messages.slice(-2);
            const userMsg = recentMessages.find(m => m.role === 'user');
            const assistantMsg = recentMessages.find(m => m.role === 'assistant');
            
            if (userMsg && assistantMsg) {
              // Try to save pattern, but don't fail if table doesn't exist
              const { error: upsertError } = await supabase
                .from('chatbot_learning_patterns')
                .upsert({
                  user_id: user.id,
                  question_pattern: userMsg.content.toLowerCase(),
                  response_category: assistantMsg.category,
                  interaction_timestamp: new Date().toISOString(),
                  feedback_score: null
                });
              
              if (upsertError) {
                console.warn('Failed to save learning pattern:', upsertError);
              }
            }
          }
        } catch (error) {
          // Silently ignore database errors for learning patterns
          console.debug('Learning pattern save failed:', error);
        }
      }
    };

    saveInteractionPattern();
  }, [messages]);

  return {
    messages,
    loading,
    sendMessage,
    quickSuggestions
  };
};
